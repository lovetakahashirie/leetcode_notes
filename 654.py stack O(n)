# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


# 即使是pass index into func，也不能用recursion。因爲跟上次不同，我們每次都要find max，不能直接pop from postorder
# 思路：先思考max binary tree的本質，他們的左右次序不會變的，只是加了高低（按照num大小）的規則，然後指向旁邊最高的那個
# 既然提到了「最高」，下面所有node.val低過他，那就可以用monotone stack
class Solution:
    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:
        # 先做個stack
        stack = []
        
        # 因爲要做O(n)，所以只過一次
        for i in nums:
            # 先開個node，準備被指/指人
            cur = TreeNode(val=i)

            # 當我stack有野，代表我左邊有野
            # 從最小開始考慮，如果他小於我，代表我指他==> cur.left = him。同時pop走他，因爲我要比較下一個左邊的更大的（所以用while）
            while stack and stack[-1].val < cur.val:
                cur.left = stack.pop()

            # 當我pop完了，我現在指向的就是，在左邊 同時 max（小於我的）
            # 我還要想，在左邊，有沒有比我更大的。如果有，那我就要被他指
            if stack and stack[-1].val > cur.val:
                stack[-1].right = cur

            # 最後一定要append
            # case 1：stack empty：那我就append進去，讓右邊的人比較
            # case 2：stack not empty：那我就是剛被stack[-1]那位指完，現在我要append進去貼著他
            stack.append(cur)

        # 最後return最大的
        return stack[0]

# 但就是慢一點，始終是pass list
# class Solution:
#     def constructMaximumBinaryTree(self, nums: List[int]) -> TreeNode:
#         if not nums:
#             return None
#         max_val = max(nums)
#         max_index = nums.index(max_val)
#         node = TreeNode(max_val)
#         node.left = self.constructMaximumBinaryTree(nums[:max_index])
#         node.right = self.constructMaximumBinaryTree(nums[max_index+1:])
#         return node        
